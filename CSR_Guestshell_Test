'''show vrf ipv4    '''

CSR_1#guestshell                                                        #进入Guestshell
[guestshell@guestshell ~]$ python
>>> import cli                                                          #导入内置的CLI模块
>>> cli.clip('show vrf ipv4')                                           #使用cli.clip函数，定义参数show vrf ipv4 查看设备 ipv4的vrf

  Name                             Default RD            Protocols   Interfaces
  VRF_1                            1:1                   ipv4        Lo10
                                                                     Lo6
  VRF_2                            2:2                   ipv4        Lo20

========================================================================================================================

'''Test-1'''

from cli import *                                                       #导入内置cli函数
ipv4_vrf = execute('show vrf ipv4')                                     #定义一个变量ipv4_vrf，执行命令show vrf ipv4
ipv4_vrf_result = []                                                    #定义一个变量ipv4_vrf_result,等于一个空列表
for line in ipv4_vrf.split('\n'):                                       #for循环，从ipv_vrf中获取数据并将二进制序列拆分为相同类型的子序列，使用'\n'作为分隔符
   ipv4_vrf_result.append(line.split()[0])                              #取第0个参数

print(ipv4_vrf_result)                                                  #打印ipv4——vrf_result变量

#['Name', 'VRF_1', 'Lo6', 'VRF_2']   

========================================================================================================================

'''Test-2'''
'''
from cli import *  
ipv4_vrf = execute('show vrf ipv4 | include ipv4')
ipv4_vrf_result = []
for line in ipv4_vrf.split('\n'):
    ipv4_vrf_result.append(line.split()[0])

print(ipv4_vrf_result)      
#['VRF_1', 'VRF_2']                       #此时便是我们想要获取到的
'''

'''Test-3'''
'''
from cli import *     
ipv4_vrf = execute('show vrf ipv4 | include ipv4')
ipv4_vrf_result = []
for line in ipv4_vrf.split('\n'):
    ipv4_vrf_result.append(line.split()[0])
    print(ipv4_vrf_result)      
#['VRF_1', 'VRF_2']

for vrf in ipv4_vrf_result:
    show_route_ipv4 = execute('show ip route vrf' + ' ' + vrf)
    print('-'*88)
    print(show_route_ipv4)
    print('-'*88)   
... 
----------------------------------------------------------------------------------------
Routing Table: VRF_1
Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP
       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area 
       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1, E2 - OSPF external type 2, m - OMP
       n - NAT, Ni - NAT inside, No - NAT outside, Nd - NAT DIA
       i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
       ia - IS-IS inter area, * - candidate default, U - per-user static route
       H - NHRP, G - NHRP registered, g - NHRP registration summary
       o - ODR, P - periodic downloaded static route, l - LISP
       a - application route
       + - replicated route, % - next hop override, p - overrides from PfR
Gateway of last resort is not set
      10.0.0.0/8 is variably subnetted, 10 subnets, 2 masks
C        10.1.1.0/24 is directly connected, Loopback10
L        10.1.1.1/32 is directly connected, Loopback10
C        10.1.2.0/24 is directly connected, Loopback10
L        10.1.2.1/32 is directly connected, Loopback10
C        10.1.3.0/24 is directly connected, Loopback10
L        10.1.3.1/32 is directly connected, Loopback10
C        10.1.4.0/24 is directly connected, Loopback10
L        10.1.4.1/32 is directly connected, Loopback10
C        10.1.5.0/24 is directly connected, Loopback10
L        10.1.5.1/32 is directly connected, Loopback10
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
Routing Table: VRF_2
Codes: L - local, C - connected, S - static, R - RIP, M - mobile, B - BGP
       D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area 
       N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2
       E1 - OSPF external type 1, E2 - OSPF external type 2, m - OMP
       n - NAT, Ni - NAT inside, No - NAT outside, Nd - NAT DIA
       i - IS-IS, su - IS-IS summary, L1 - IS-IS level-1, L2 - IS-IS level-2
       ia - IS-IS inter area, * - candidate default, U - per-user static route
       H - NHRP, G - NHRP registered, g - NHRP registration summary
       o - ODR, P - periodic downloaded static route, l - LISP
       a - application route
       + - replicated route, % - next hop override, p - overrides from PfR
Gateway of last resort is not set
      20.0.0.0/8 is variably subnetted, 10 subnets, 2 masks
C        20.1.1.0/24 is directly connected, Loopback20
L        20.1.1.1/32 is directly connected, Loopback20
C        20.1.2.0/24 is directly connected, Loopback20
L        20.1.2.1/32 is directly connected, Loopback20
C        20.1.3.0/24 is directly connected, Loopback20
L        20.1.3.1/32 is directly connected, Loopback20
C        20.1.4.0/24 is directly connected, Loopback20
L        20.1.4.1/32 is directly connected, Loopback20
C        20.1.5.0/24 is directly connected, Loopback20
L        20.1.5.1/32 is directly connected, Loopback20
----------------------------------------------------------------------------------------
>>> 
'''

'''Test-4'''
'''
from cli import *     #导入cli的所有函数
ipv4_vrf = execute('show vrf ipv4 | include ipv4')
ipv4_vrf = execute('show vrf ipv4 | include ipv4')
ipv4_vrf_result = []
ipv4_vrf_result = []
for line in ipv4_vrf.split('\n'):
    ipv4_vrf_result.append(line.split()[0])

print(ipv4_vrf_result)      
#['VRF_1', 'VRF_2']

show_route_ipv4 = 'vrf result'

for vrf in ipv4_vrf_result:
    show_route_ipv4 += '\n' + '-'*88
    show_route_ipv4 += '\n' 
    show_route_ipv4 += execute('show ip route vrf' + ' ' + vrf)
    show_route_ipv4 += '\n'

final = show_route_ipv4
file = open('route.txt','w')
file.write(final)
file.close()
'''
